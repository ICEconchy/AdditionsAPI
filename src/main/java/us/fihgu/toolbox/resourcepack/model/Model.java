package us.fihgu.toolbox.resourcepack.model;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

/**
 * A basic model
 */
public class Model
{
	/**
	 * Loads a different model from the given path
	 */
	protected String parent;

	/**
	 * Holds the textures of the model.<br>
	 *     <p>
	 *   		- <b>layer#</b>: Only used to specify the icon of the <b>item</b> used in the inventory. There can be more than just one layer (e.g. for spawn eggs), but the amount of possible layers is hardcoded for each item. Only works in combination with "builtin/generated".  <br>
	 * 			- <b>particle</b>: What texture to load particles from. Used to determine the "crumb" particles generated by food items, as well as to determine the barrier particle (but it always uses items/barrier.png as block breaking particle), which otherwise will use "layer0". <br>
	 * 			- <b><i>A texture variable</i></b>: Defines a texture variable and assigns it a texture, which can be referenced in an element by adding a # in front of the variable name <br>
	 *     </p>
	 *
	 */
	protected HashMap<String, String> textures;

	/**
	 * Holds the different places where item models are displayed.
	 */
	protected DisplayOptions display;

	/**
	 * Contains all the elements of the model. they can only have cubic forms, overrides parent's elements.
	 */
	protected List<ModelElement> elements;

	/**
	 * @return {@link #parent}
	 */
	public String getParent()
	{
		return parent;
	}

	/**
	 * @param parent {@link #parent}
	 */
	public void setParent(String parent)
	{
		this.parent = parent;
	}

	/**
	 * @return {@link #textures}
	 */
	public HashMap<String, String> getTextures()
	{
		return textures;
	}

	/**
	 * @param textures {@link #textures}
	 */
	public void setTextures(HashMap<String, String> textures)
	{
		this.textures = textures;
	}

	/**
	 * See {@link #textures}, if it is null, a new HashMap is created.
	 */
	public void putTexture(String name, String texture)
	{
		if(textures == null)
		{
			textures = new HashMap<>();
		}

		this.textures.put(name, texture);
	}

	/**
	 * @return {@link #display}
	 */
	public DisplayOptions getDisplay()
	{
		return display;
	}

	/**
	 * @param display {@link #display}
	 */
	public void setDisplay(DisplayOptions display)
	{
		this.display = display;
	}

	/**
	 * See {@link #elements}
	 */
	public List<ModelElement> getElements()
	{
		return elements;
	}

	/**
	 * See {@link #elements}
	 */
	public void setElements(List<ModelElement> elements)
	{
		this.elements = elements;
	}

	/**
	 * See {@link #elements}<br>
	 *     creates the list for you if it does not exist.
	 */
	public void addElements(ModelElement element)
	{
		if(this.elements == null)
		{
			this.elements = new LinkedList<>();
		}

		this.elements.add(element);
	}
}
